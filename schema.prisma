// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  name      String    @default("")
  email     String    @unique @default("")
  password  String
  role      String?
  createdAt DateTime? @default(now())
}

model Class {
  id                    String       @id @default(cuid())
  class_name            String       @unique @default("")
  major                 Major?       @relation("Class_major", fields: [majorId], references: [id])
  majorId               String?      @map("major")
  academic_year         String       @default("")
  from_Student_class    Student[]    @relation("Student_class")
  from_CreditRule_class CreditRule[] @relation("CreditRule_class")

  @@index([majorId])
}

model Major {
  id               String  @id @default(cuid())
  major_name       String  @unique @default("")
  description      String  @default("")
  from_Class_major Class[] @relation("Class_major")
}

model Semester {
  id                               String               @id @default(cuid())
  semester_name                    String               @unique @default("")
  start_date                       DateTime
  end_date                         DateTime
  registration_start               DateTime
  registration_end                 DateTime
  payment_deadline                 DateTime
  from_CourseResult_semester       CourseResult[]       @relation("CourseResult_semester")
  from_CourseRegistration_semester CourseRegistration[] @relation("CourseRegistration_semester")
  from_TuitionFee_semester         TuitionFee[]         @relation("TuitionFee_semester")
  from_CreditRule_semester         CreditRule[]         @relation("CreditRule_semester")
  from_DebtReport_semester         DebtReport[]         @relation("DebtReport_semester")
}

model Student {
  id                              String               @id @default(cuid())
  student_code                    String               @unique @default("")
  first_name                      String               @default("")
  last_name                       String               @default("")
  date_of_birth                   DateTime
  gender                          String
  hometown                        String               @default("")
  priority_type                   String?              @default("none")
  contact_address                 String               @default("")
  email                           String               @unique @default("")
  phone_number                    String               @default("")
  class                           Class?               @relation("Student_class", fields: [classId], references: [id])
  classId                         String?              @map("class")
  account_locked                  Boolean              @default(false)
  from_CourseResult_student       CourseResult[]       @relation("CourseResult_student")
  from_CourseRegistration_student CourseRegistration[] @relation("CourseRegistration_student")
  from_TuitionFee_student         TuitionFee[]         @relation("TuitionFee_student")
  from_DebtReport_student         DebtReport[]         @relation("DebtReport_student")

  @@index([classId])
}

model Course {
  id                                   String               @id @default(cuid())
  course_name                          String               @unique @default("")
  course_code                          String               @unique @default("")
  course_type                          String
  credits                              Int
  description                          String               @default("")
  from_PrerequisiteCourse_course       PrerequisiteCourse[] @relation("PrerequisiteCourse_course")
  from_PrerequisiteCourse_prerequisite PrerequisiteCourse[] @relation("PrerequisiteCourse_prerequisite")
  from_CourseResult_course             CourseResult[]       @relation("CourseResult_course")
  from_CourseRegistration_course       CourseRegistration[] @relation("CourseRegistration_course")
}

model PrerequisiteCourse {
  id             String  @id @default(cuid())
  course         Course? @relation("PrerequisiteCourse_course", fields: [courseId], references: [id])
  courseId       String? @map("course")
  prerequisite   Course? @relation("PrerequisiteCourse_prerequisite", fields: [prerequisiteId], references: [id])
  prerequisiteId String? @map("prerequisite")
  min_grade      Float

  @@index([courseId])
  @@index([prerequisiteId])
}

model CourseResult {
  id         String    @id @default(cuid())
  student    Student?  @relation("CourseResult_student", fields: [studentId], references: [id])
  studentId  String?   @map("student")
  course     Course?   @relation("CourseResult_course", fields: [courseId], references: [id])
  courseId   String?   @map("course")
  semester   Semester? @relation("CourseResult_semester", fields: [semesterId], references: [id])
  semesterId String?   @map("semester")
  grade      Float?

  @@index([studentId])
  @@index([courseId])
  @@index([semesterId])
}

model CourseRegistration {
  id                String    @id @default(cuid())
  student           Student?  @relation("CourseRegistration_student", fields: [studentId], references: [id])
  studentId         String?   @map("student")
  course            Course?   @relation("CourseRegistration_course", fields: [courseId], references: [id])
  courseId          String?   @map("course")
  semester          Semester? @relation("CourseRegistration_semester", fields: [semesterId], references: [id])
  semesterId        String?   @map("semester")
  registration_date DateTime? @default(now())
  status            String?   @default("registered")

  @@index([studentId])
  @@index([courseId])
  @@index([semesterId])
}

model TuitionFee {
  id               String    @id @default(cuid())
  student          Student?  @relation("TuitionFee_student", fields: [studentId], references: [id])
  studentId        String?   @map("student")
  semester         Semester? @relation("TuitionFee_semester", fields: [semesterId], references: [id])
  semesterId       String?   @map("semester")
  total_credits    Int
  tuition_fee      Float
  discount         Float?
  amount_paid      Float?
  payment_status   String?   @default("unpaid")
  discount_details String    @default("")

  @@index([studentId])
  @@index([semesterId])
}

model CreditRule {
  id          String    @id @default(cuid())
  class       Class?    @relation("CreditRule_class", fields: [classId], references: [id])
  classId     String?   @map("class")
  semester    Semester? @relation("CreditRule_semester", fields: [semesterId], references: [id])
  semesterId  String?   @map("semester")
  min_credits Int
  max_credits Int

  @@index([classId])
  @@index([semesterId])
}

model FeeRate {
  id             String @id @default(cuid())
  course_type    String @unique
  fee_per_credit Float
}

model DebtReport {
  id          String    @id @default(cuid())
  student     Student?  @relation("DebtReport_student", fields: [studentId], references: [id])
  studentId   String?   @map("student")
  semester    Semester? @relation("DebtReport_semester", fields: [semesterId], references: [id])
  semesterId  String?   @map("semester")
  debt_amount Float
  report_date DateTime? @default(now())

  @@index([studentId])
  @@index([semesterId])
}
