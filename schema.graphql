# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: UserRoleType
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  academic_staff
  finance_staff
  student
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  createdAt: DateTime
}

type Class {
  id: ID!
  class_name: String
  major: Major
  academic_year: String
}

input ClassWhereUniqueInput {
  id: ID
  class_name: String
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  id: IDFilter
  class_name: StringFilter
  major: MajorWhereInput
  academic_year: StringFilter
}

input ClassOrderByInput {
  id: OrderDirection
  class_name: OrderDirection
  academic_year: OrderDirection
}

input ClassUpdateInput {
  class_name: String
  major: MajorRelateToOneForUpdateInput
  academic_year: String
}

input MajorRelateToOneForUpdateInput {
  create: MajorCreateInput
  connect: MajorWhereUniqueInput
  disconnect: Boolean
}

input ClassUpdateArgs {
  where: ClassWhereUniqueInput!
  data: ClassUpdateInput!
}

input ClassCreateInput {
  class_name: String
  major: MajorRelateToOneForCreateInput
  academic_year: String
}

input MajorRelateToOneForCreateInput {
  create: MajorCreateInput
  connect: MajorWhereUniqueInput
}

type Major {
  id: ID!
  major_name: String
  description: String
}

input MajorWhereUniqueInput {
  id: ID
  major_name: String
}

input MajorWhereInput {
  AND: [MajorWhereInput!]
  OR: [MajorWhereInput!]
  NOT: [MajorWhereInput!]
  id: IDFilter
  major_name: StringFilter
  description: StringFilter
}

input MajorOrderByInput {
  id: OrderDirection
  major_name: OrderDirection
  description: OrderDirection
}

input MajorUpdateInput {
  major_name: String
  description: String
}

input MajorUpdateArgs {
  where: MajorWhereUniqueInput!
  data: MajorUpdateInput!
}

input MajorCreateInput {
  major_name: String
  description: String
}

type Semester {
  id: ID!
  semester_name: String
  start_date: DateTime
  end_date: DateTime
  registration_start: DateTime
  registration_end: DateTime
  payment_deadline: DateTime
}

input SemesterWhereUniqueInput {
  id: ID
  semester_name: String
}

input SemesterWhereInput {
  AND: [SemesterWhereInput!]
  OR: [SemesterWhereInput!]
  NOT: [SemesterWhereInput!]
  id: IDFilter
  semester_name: StringFilter
  start_date: DateTimeFilter
  end_date: DateTimeFilter
  registration_start: DateTimeFilter
  registration_end: DateTimeFilter
  payment_deadline: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input SemesterOrderByInput {
  id: OrderDirection
  semester_name: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  registration_start: OrderDirection
  registration_end: OrderDirection
  payment_deadline: OrderDirection
}

input SemesterUpdateInput {
  semester_name: String
  start_date: DateTime
  end_date: DateTime
  registration_start: DateTime
  registration_end: DateTime
  payment_deadline: DateTime
}

input SemesterUpdateArgs {
  where: SemesterWhereUniqueInput!
  data: SemesterUpdateInput!
}

input SemesterCreateInput {
  semester_name: String
  start_date: DateTime
  end_date: DateTime
  registration_start: DateTime
  registration_end: DateTime
  payment_deadline: DateTime
}

type Student {
  id: ID!
  student_code: String
  first_name: String
  last_name: String
  date_of_birth: DateTime
  gender: String
  hometown: String
  priority_type: String
  contact_address: String
  email: String
  phone_number: String
  class: Class
  account_locked: Boolean
}

input StudentWhereUniqueInput {
  id: ID
  student_code: String
  email: String
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  id: IDFilter
  student_code: StringFilter
  first_name: StringFilter
  last_name: StringFilter
  date_of_birth: DateTimeFilter
  gender: StringFilter
  hometown: StringFilter
  priority_type: StringNullableFilter
  contact_address: StringFilter
  email: StringFilter
  phone_number: StringFilter
  class: ClassWhereInput
  account_locked: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input StudentOrderByInput {
  id: OrderDirection
  student_code: OrderDirection
  first_name: OrderDirection
  last_name: OrderDirection
  date_of_birth: OrderDirection
  gender: OrderDirection
  hometown: OrderDirection
  priority_type: OrderDirection
  contact_address: OrderDirection
  email: OrderDirection
  phone_number: OrderDirection
  account_locked: OrderDirection
}

input StudentUpdateInput {
  student_code: String
  first_name: String
  last_name: String
  date_of_birth: DateTime
  gender: String
  hometown: String
  priority_type: String
  contact_address: String
  email: String
  phone_number: String
  class: ClassRelateToOneForUpdateInput
  account_locked: Boolean
}

input ClassRelateToOneForUpdateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
  disconnect: Boolean
}

input StudentUpdateArgs {
  where: StudentWhereUniqueInput!
  data: StudentUpdateInput!
}

input StudentCreateInput {
  student_code: String
  first_name: String
  last_name: String
  date_of_birth: DateTime
  gender: String
  hometown: String
  priority_type: String
  contact_address: String
  email: String
  phone_number: String
  class: ClassRelateToOneForCreateInput
  account_locked: Boolean
}

input ClassRelateToOneForCreateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

type Course {
  id: ID!
  course_name: String
  course_code: String
  course_type: String
  credits: Int
  description: String
}

input CourseWhereUniqueInput {
  id: ID
  course_name: String
  course_code: String
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  course_name: StringFilter
  course_code: StringFilter
  course_type: StringFilter
  credits: IntFilter
  description: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input CourseOrderByInput {
  id: OrderDirection
  course_name: OrderDirection
  course_code: OrderDirection
  course_type: OrderDirection
  credits: OrderDirection
  description: OrderDirection
}

input CourseUpdateInput {
  course_name: String
  course_code: String
  course_type: String
  credits: Int
  description: String
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  course_name: String
  course_code: String
  course_type: String
  credits: Int
  description: String
}

type PrerequisiteCourse {
  id: ID!
  course: Course
  prerequisite: Course
  min_grade: Float
}

input PrerequisiteCourseWhereUniqueInput {
  id: ID
}

input PrerequisiteCourseWhereInput {
  AND: [PrerequisiteCourseWhereInput!]
  OR: [PrerequisiteCourseWhereInput!]
  NOT: [PrerequisiteCourseWhereInput!]
  id: IDFilter
  course: CourseWhereInput
  prerequisite: CourseWhereInput
  min_grade: FloatFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input PrerequisiteCourseOrderByInput {
  id: OrderDirection
  min_grade: OrderDirection
}

input PrerequisiteCourseUpdateInput {
  course: CourseRelateToOneForUpdateInput
  prerequisite: CourseRelateToOneForUpdateInput
  min_grade: Float
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input PrerequisiteCourseUpdateArgs {
  where: PrerequisiteCourseWhereUniqueInput!
  data: PrerequisiteCourseUpdateInput!
}

input PrerequisiteCourseCreateInput {
  course: CourseRelateToOneForCreateInput
  prerequisite: CourseRelateToOneForCreateInput
  min_grade: Float
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type CourseResult {
  id: ID!
  student: Student
  course: Course
  semester: Semester
  grade: Float
}

input CourseResultWhereUniqueInput {
  id: ID
}

input CourseResultWhereInput {
  AND: [CourseResultWhereInput!]
  OR: [CourseResultWhereInput!]
  NOT: [CourseResultWhereInput!]
  id: IDFilter
  student: StudentWhereInput
  course: CourseWhereInput
  semester: SemesterWhereInput
  grade: FloatNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input CourseResultOrderByInput {
  id: OrderDirection
  grade: OrderDirection
}

input CourseResultUpdateInput {
  student: StudentRelateToOneForUpdateInput
  course: CourseRelateToOneForUpdateInput
  semester: SemesterRelateToOneForUpdateInput
  grade: Float
}

input StudentRelateToOneForUpdateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
  disconnect: Boolean
}

input SemesterRelateToOneForUpdateInput {
  create: SemesterCreateInput
  connect: SemesterWhereUniqueInput
  disconnect: Boolean
}

input CourseResultUpdateArgs {
  where: CourseResultWhereUniqueInput!
  data: CourseResultUpdateInput!
}

input CourseResultCreateInput {
  student: StudentRelateToOneForCreateInput
  course: CourseRelateToOneForCreateInput
  semester: SemesterRelateToOneForCreateInput
  grade: Float
}

input StudentRelateToOneForCreateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
}

input SemesterRelateToOneForCreateInput {
  create: SemesterCreateInput
  connect: SemesterWhereUniqueInput
}

type CourseRegistration {
  id: ID!
  student: Student
  course: Course
  semester: Semester
  registration_date: DateTime
  status: String
}

input CourseRegistrationWhereUniqueInput {
  id: ID
}

input CourseRegistrationWhereInput {
  AND: [CourseRegistrationWhereInput!]
  OR: [CourseRegistrationWhereInput!]
  NOT: [CourseRegistrationWhereInput!]
  id: IDFilter
  student: StudentWhereInput
  course: CourseWhereInput
  semester: SemesterWhereInput
  registration_date: DateTimeNullableFilter
  status: StringNullableFilter
}

input CourseRegistrationOrderByInput {
  id: OrderDirection
  registration_date: OrderDirection
  status: OrderDirection
}

input CourseRegistrationUpdateInput {
  student: StudentRelateToOneForUpdateInput
  course: CourseRelateToOneForUpdateInput
  semester: SemesterRelateToOneForUpdateInput
  registration_date: DateTime
  status: String
}

input CourseRegistrationUpdateArgs {
  where: CourseRegistrationWhereUniqueInput!
  data: CourseRegistrationUpdateInput!
}

input CourseRegistrationCreateInput {
  student: StudentRelateToOneForCreateInput
  course: CourseRelateToOneForCreateInput
  semester: SemesterRelateToOneForCreateInput
  registration_date: DateTime
  status: String
}

type TuitionFee {
  id: ID!
  student: Student
  semester: Semester
  total_credits: Int
  tuition_fee: Float
  discount: Float
  amount_paid: Float
  payment_status: String
  discount_details: String
}

input TuitionFeeWhereUniqueInput {
  id: ID
}

input TuitionFeeWhereInput {
  AND: [TuitionFeeWhereInput!]
  OR: [TuitionFeeWhereInput!]
  NOT: [TuitionFeeWhereInput!]
  id: IDFilter
  student: StudentWhereInput
  semester: SemesterWhereInput
  total_credits: IntFilter
  tuition_fee: FloatFilter
  discount: FloatNullableFilter
  amount_paid: FloatNullableFilter
  payment_status: StringNullableFilter
  discount_details: StringFilter
}

input TuitionFeeOrderByInput {
  id: OrderDirection
  total_credits: OrderDirection
  tuition_fee: OrderDirection
  discount: OrderDirection
  amount_paid: OrderDirection
  payment_status: OrderDirection
  discount_details: OrderDirection
}

input TuitionFeeUpdateInput {
  student: StudentRelateToOneForUpdateInput
  semester: SemesterRelateToOneForUpdateInput
  total_credits: Int
  tuition_fee: Float
  discount: Float
  amount_paid: Float
  payment_status: String
  discount_details: String
}

input TuitionFeeUpdateArgs {
  where: TuitionFeeWhereUniqueInput!
  data: TuitionFeeUpdateInput!
}

input TuitionFeeCreateInput {
  student: StudentRelateToOneForCreateInput
  semester: SemesterRelateToOneForCreateInput
  total_credits: Int
  tuition_fee: Float
  discount: Float
  amount_paid: Float
  payment_status: String
  discount_details: String
}

type CreditRule {
  id: ID!
  class: Class
  semester: Semester
  min_credits: Int
  max_credits: Int
}

input CreditRuleWhereUniqueInput {
  id: ID
}

input CreditRuleWhereInput {
  AND: [CreditRuleWhereInput!]
  OR: [CreditRuleWhereInput!]
  NOT: [CreditRuleWhereInput!]
  id: IDFilter
  class: ClassWhereInput
  semester: SemesterWhereInput
  min_credits: IntFilter
  max_credits: IntFilter
}

input CreditRuleOrderByInput {
  id: OrderDirection
  min_credits: OrderDirection
  max_credits: OrderDirection
}

input CreditRuleUpdateInput {
  class: ClassRelateToOneForUpdateInput
  semester: SemesterRelateToOneForUpdateInput
  min_credits: Int
  max_credits: Int
}

input CreditRuleUpdateArgs {
  where: CreditRuleWhereUniqueInput!
  data: CreditRuleUpdateInput!
}

input CreditRuleCreateInput {
  class: ClassRelateToOneForCreateInput
  semester: SemesterRelateToOneForCreateInput
  min_credits: Int
  max_credits: Int
}

type FeeRate {
  id: ID!
  course_type: String
  fee_per_credit: Float
}

input FeeRateWhereUniqueInput {
  id: ID
  course_type: String
}

input FeeRateWhereInput {
  AND: [FeeRateWhereInput!]
  OR: [FeeRateWhereInput!]
  NOT: [FeeRateWhereInput!]
  id: IDFilter
  course_type: StringFilter
  fee_per_credit: FloatFilter
}

input FeeRateOrderByInput {
  id: OrderDirection
  course_type: OrderDirection
  fee_per_credit: OrderDirection
}

input FeeRateUpdateInput {
  course_type: String
  fee_per_credit: Float
}

input FeeRateUpdateArgs {
  where: FeeRateWhereUniqueInput!
  data: FeeRateUpdateInput!
}

input FeeRateCreateInput {
  course_type: String
  fee_per_credit: Float
}

type DebtReport {
  id: ID!
  student: Student
  semester: Semester
  debt_amount: Float
  report_date: DateTime
}

input DebtReportWhereUniqueInput {
  id: ID
}

input DebtReportWhereInput {
  AND: [DebtReportWhereInput!]
  OR: [DebtReportWhereInput!]
  NOT: [DebtReportWhereInput!]
  id: IDFilter
  student: StudentWhereInput
  semester: SemesterWhereInput
  debt_amount: FloatFilter
  report_date: DateTimeNullableFilter
}

input DebtReportOrderByInput {
  id: OrderDirection
  debt_amount: OrderDirection
  report_date: OrderDirection
}

input DebtReportUpdateInput {
  student: StudentRelateToOneForUpdateInput
  semester: SemesterRelateToOneForUpdateInput
  debt_amount: Float
  report_date: DateTime
}

input DebtReportUpdateArgs {
  where: DebtReportWhereUniqueInput!
  data: DebtReportUpdateInput!
}

input DebtReportCreateInput {
  student: StudentRelateToOneForCreateInput
  semester: SemesterRelateToOneForCreateInput
  debt_amount: Float
  report_date: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createClass(data: ClassCreateInput!): Class
  createClasses(data: [ClassCreateInput!]!): [Class]
  updateClass(where: ClassWhereUniqueInput!, data: ClassUpdateInput!): Class
  updateClasses(data: [ClassUpdateArgs!]!): [Class]
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteClasses(where: [ClassWhereUniqueInput!]!): [Class]
  createMajor(data: MajorCreateInput!): Major
  createMajors(data: [MajorCreateInput!]!): [Major]
  updateMajor(where: MajorWhereUniqueInput!, data: MajorUpdateInput!): Major
  updateMajors(data: [MajorUpdateArgs!]!): [Major]
  deleteMajor(where: MajorWhereUniqueInput!): Major
  deleteMajors(where: [MajorWhereUniqueInput!]!): [Major]
  createSemester(data: SemesterCreateInput!): Semester
  createSemesters(data: [SemesterCreateInput!]!): [Semester]
  updateSemester(where: SemesterWhereUniqueInput!, data: SemesterUpdateInput!): Semester
  updateSemesters(data: [SemesterUpdateArgs!]!): [Semester]
  deleteSemester(where: SemesterWhereUniqueInput!): Semester
  deleteSemesters(where: [SemesterWhereUniqueInput!]!): [Semester]
  createStudent(data: StudentCreateInput!): Student
  createStudents(data: [StudentCreateInput!]!): [Student]
  updateStudent(where: StudentWhereUniqueInput!, data: StudentUpdateInput!): Student
  updateStudents(data: [StudentUpdateArgs!]!): [Student]
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteStudents(where: [StudentWhereUniqueInput!]!): [Student]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createPrerequisiteCourse(data: PrerequisiteCourseCreateInput!): PrerequisiteCourse
  createPrerequisiteCourses(data: [PrerequisiteCourseCreateInput!]!): [PrerequisiteCourse]
  updatePrerequisiteCourse(where: PrerequisiteCourseWhereUniqueInput!, data: PrerequisiteCourseUpdateInput!): PrerequisiteCourse
  updatePrerequisiteCourses(data: [PrerequisiteCourseUpdateArgs!]!): [PrerequisiteCourse]
  deletePrerequisiteCourse(where: PrerequisiteCourseWhereUniqueInput!): PrerequisiteCourse
  deletePrerequisiteCourses(where: [PrerequisiteCourseWhereUniqueInput!]!): [PrerequisiteCourse]
  createCourseResult(data: CourseResultCreateInput!): CourseResult
  createCourseResults(data: [CourseResultCreateInput!]!): [CourseResult]
  updateCourseResult(where: CourseResultWhereUniqueInput!, data: CourseResultUpdateInput!): CourseResult
  updateCourseResults(data: [CourseResultUpdateArgs!]!): [CourseResult]
  deleteCourseResult(where: CourseResultWhereUniqueInput!): CourseResult
  deleteCourseResults(where: [CourseResultWhereUniqueInput!]!): [CourseResult]
  createCourseRegistration(data: CourseRegistrationCreateInput!): CourseRegistration
  createCourseRegistrations(data: [CourseRegistrationCreateInput!]!): [CourseRegistration]
  updateCourseRegistration(where: CourseRegistrationWhereUniqueInput!, data: CourseRegistrationUpdateInput!): CourseRegistration
  updateCourseRegistrations(data: [CourseRegistrationUpdateArgs!]!): [CourseRegistration]
  deleteCourseRegistration(where: CourseRegistrationWhereUniqueInput!): CourseRegistration
  deleteCourseRegistrations(where: [CourseRegistrationWhereUniqueInput!]!): [CourseRegistration]
  createTuitionFee(data: TuitionFeeCreateInput!): TuitionFee
  createTuitionFees(data: [TuitionFeeCreateInput!]!): [TuitionFee]
  updateTuitionFee(where: TuitionFeeWhereUniqueInput!, data: TuitionFeeUpdateInput!): TuitionFee
  updateTuitionFees(data: [TuitionFeeUpdateArgs!]!): [TuitionFee]
  deleteTuitionFee(where: TuitionFeeWhereUniqueInput!): TuitionFee
  deleteTuitionFees(where: [TuitionFeeWhereUniqueInput!]!): [TuitionFee]
  createCreditRule(data: CreditRuleCreateInput!): CreditRule
  createCreditRules(data: [CreditRuleCreateInput!]!): [CreditRule]
  updateCreditRule(where: CreditRuleWhereUniqueInput!, data: CreditRuleUpdateInput!): CreditRule
  updateCreditRules(data: [CreditRuleUpdateArgs!]!): [CreditRule]
  deleteCreditRule(where: CreditRuleWhereUniqueInput!): CreditRule
  deleteCreditRules(where: [CreditRuleWhereUniqueInput!]!): [CreditRule]
  createFeeRate(data: FeeRateCreateInput!): FeeRate
  createFeeRates(data: [FeeRateCreateInput!]!): [FeeRate]
  updateFeeRate(where: FeeRateWhereUniqueInput!, data: FeeRateUpdateInput!): FeeRate
  updateFeeRates(data: [FeeRateUpdateArgs!]!): [FeeRate]
  deleteFeeRate(where: FeeRateWhereUniqueInput!): FeeRate
  deleteFeeRates(where: [FeeRateWhereUniqueInput!]!): [FeeRate]
  createDebtReport(data: DebtReportCreateInput!): DebtReport
  createDebtReports(data: [DebtReportCreateInput!]!): [DebtReport]
  updateDebtReport(where: DebtReportWhereUniqueInput!, data: DebtReportUpdateInput!): DebtReport
  updateDebtReports(data: [DebtReportUpdateArgs!]!): [DebtReport]
  deleteDebtReport(where: DebtReportWhereUniqueInput!): DebtReport
  deleteDebtReports(where: [DebtReportWhereUniqueInput!]!): [DebtReport]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  class(where: ClassWhereUniqueInput!): Class
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  major(where: MajorWhereUniqueInput!): Major
  majors(where: MajorWhereInput! = {}, orderBy: [MajorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MajorWhereUniqueInput): [Major!]
  majorsCount(where: MajorWhereInput! = {}): Int
  semester(where: SemesterWhereUniqueInput!): Semester
  semesters(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  semestersCount(where: SemesterWhereInput! = {}): Int
  student(where: StudentWhereUniqueInput!): Student
  students(where: StudentWhereInput! = {}, orderBy: [StudentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudentWhereUniqueInput): [Student!]
  studentsCount(where: StudentWhereInput! = {}): Int
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  prerequisiteCourse(where: PrerequisiteCourseWhereUniqueInput!): PrerequisiteCourse
  prerequisiteCourses(where: PrerequisiteCourseWhereInput! = {}, orderBy: [PrerequisiteCourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PrerequisiteCourseWhereUniqueInput): [PrerequisiteCourse!]
  prerequisiteCoursesCount(where: PrerequisiteCourseWhereInput! = {}): Int
  courseResult(where: CourseResultWhereUniqueInput!): CourseResult
  courseResults(where: CourseResultWhereInput! = {}, orderBy: [CourseResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseResultWhereUniqueInput): [CourseResult!]
  courseResultsCount(where: CourseResultWhereInput! = {}): Int
  courseRegistration(where: CourseRegistrationWhereUniqueInput!): CourseRegistration
  courseRegistrations(where: CourseRegistrationWhereInput! = {}, orderBy: [CourseRegistrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseRegistrationWhereUniqueInput): [CourseRegistration!]
  courseRegistrationsCount(where: CourseRegistrationWhereInput! = {}): Int
  tuitionFee(where: TuitionFeeWhereUniqueInput!): TuitionFee
  tuitionFees(where: TuitionFeeWhereInput! = {}, orderBy: [TuitionFeeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TuitionFeeWhereUniqueInput): [TuitionFee!]
  tuitionFeesCount(where: TuitionFeeWhereInput! = {}): Int
  creditRule(where: CreditRuleWhereUniqueInput!): CreditRule
  creditRules(where: CreditRuleWhereInput! = {}, orderBy: [CreditRuleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CreditRuleWhereUniqueInput): [CreditRule!]
  creditRulesCount(where: CreditRuleWhereInput! = {}): Int
  feeRate(where: FeeRateWhereUniqueInput!): FeeRate
  feeRates(where: FeeRateWhereInput! = {}, orderBy: [FeeRateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeeRateWhereUniqueInput): [FeeRate!]
  feeRatesCount(where: FeeRateWhereInput! = {}): Int
  debtReport(where: DebtReportWhereUniqueInput!): DebtReport
  debtReports(where: DebtReportWhereInput! = {}, orderBy: [DebtReportOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DebtReportWhereUniqueInput): [DebtReport!]
  debtReportsCount(where: DebtReportWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
